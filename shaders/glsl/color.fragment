// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 ES as appropriate.

#include "fragmentVersionSimple.h"

#include "uniformShaderConstants.h"
#include "uniformPerFrameConstants.h"

#include "includes/color_grading.glsl"
#include "includes/helpers.glsl"
#include "includes/ingame_env.glsl"
#include "includes/clouds.glsl"

varying float height;
varying vec4 position;
varying float isUnderWater;



// Skyplane fragment shader and maybe clouds
void main()
{
    
	//float isRain = detectRain(FOG_COLOR.rgb, FOG_CONTROL.g);
	float isRain = detectRain(FOG_CONTROL.r);

	//float isNight = 1.0 - pow(length(FOG_COLOR.rgb), 0.01);

	//vec3 clearSkyColor = vec3(0.41, 0.69, 1.0);

	//vec3 clearSkyColor = normalize(pow(FOG_COLOR.rgb, vec3(1.0 + (1.0 - FOG_COLOR.r) * 2.0)));

	vec3 clearSkyColor = pow(FOG_COLOR.rgb, vec3(0.6));

	//vec3 nightClearSkyColor = vec3(0.1, 0.2, 0.3) * 1.0;

	//clearSkyColor = mix(clearSkyColor, nightClearSkyColor, isNight);

	vec3 clearSkyZenithColor = vec3(0.1, 0.2, 0.4) * length(clearSkyColor);

	vec3 rainSkyColor = vec3(0.25, 0.25, 0.25) * length(FOG_COLOR.rgb);


	float skyAttenuation = 2.0;
	float skyZenithEdgeOffset = 3.0;
	vec3 skyColor = mix(clearSkyZenithColor, clearSkyColor, pow(min(height * skyZenithEdgeOffset, 1.0), skyAttenuation));
	skyColor = mix(skyColor, rainSkyColor, isRain);

	





// 	highp float time = TIME;
	float cloudsSpeed = 0.1;
	float cloudsScale = 16.0;
	int cloudsDetail = 5;

    float clouds = calculateCloudsBase(position.xz, cloudsSpeed, cloudsScale, cloudsDetail);

	float cloudsShadow = pow(clamp(clouds * 1.5, 0.0, 1.0), 0.75);

	float cloudsCutout = pow(min(clouds * 1.75, 1.0), 1.0 * isRain + 64.0 * (1.0 - isRain));
	
	vec3 cloudsColor = vec3(1.5) * pow(length(FOG_COLOR.gb), 2.0);
	vec3 clearSkyCloudsShadowColor = (skyColor * (0.5 + pow(length(FOG_COLOR.gb), 2.0) * 0.5)) * 0.75;
	vec3 rainSkyCloudsShadowColor = cloudsColor;
	vec3 cloudsShadowColor = mix(clearSkyCloudsShadowColor, rainSkyCloudsShadowColor, isRain);
	
	cloudsShadowColor = mix(cloudsShadowColor, vec3(length(cloudsShadowColor)), 0.125); //desaturate

	cloudsColor = mix(cloudsColor, cloudsShadowColor, cloudsShadow);

	vec4 diffuse;
	diffuse.rgb = mix(skyColor, cloudsColor, cloudsCutout);
	diffuse = colorGrading(diffuse);
	
	
	if(isUnderWater > 0.9){
		diffuse.rgb = FOG_COLOR.rgb;
	}


	//gl_FragColor = diffuse;
	gl_FragColor.rgb = diffuse.rgb;
	gl_FragColor.a = 1.0;
	//gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}
