// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 ES as appropriate.

// This is a skyplane fragment shader

#include "fragmentVersionSimple.h"

#include "uniformShaderConstants.h"
#include "uniformPerFrameConstants.h"

#include "includes/color_grading.glsl"
#include "includes/helpers.glsl"
#include "includes/ingame_env.glsl"
#include "includes/clouds.glsl"

varying float height;
varying vec4 position;
varying float isUnderWater;

vec3 calculateSkyColor(float isRain){
	vec3 clearSkyColor = pow(FOG_COLOR.rgb, vec3(0.6));

	vec3 clearSkyZenithColor = vec3(0.1, 0.2, 0.4) * length(clearSkyColor);

	vec3 rainSkyColor = vec3(0.25, 0.25, 0.25) * length(FOG_COLOR.rgb);


	float skyAttenuation = 2.0;
	float skyZenithEdgeOffset = 3.0;
	vec3 skyColor = mix(clearSkyZenithColor, clearSkyColor, pow(min(height * skyZenithEdgeOffset, 1.0), skyAttenuation));
	return mix(skyColor, rainSkyColor, isRain);
	// return vec3(0.5);
}


void main()
{
	float isRain = detectRain(FOG_CONTROL.r);

	vec3 skyColor = calculateSkyColor(isRain);

	float cloudsSpeed = 0.1;
	float cloudsScale = 16.0;
	int cloudsDetail = 5;

    float cloudsBase = calculateCloudsBase(position.xz, cloudsSpeed, cloudsScale, cloudsDetail);

	float cloudsCutout = pow(min(cloudsBase * 1.75, 1.0), 1.0 * isRain + 64.0 * (1.0 - isRain));

	vec3 cloudsColor = colorizeClouds(cloudsBase, cloudsCutout, isRain, skyColor);

	vec4 diffuse;
	diffuse.rgb = mix(skyColor, cloudsColor, cloudsCutout);
	diffuse = colorGrading(diffuse);
	
	
	if(isUnderWater > 0.9){
		diffuse.rgb = FOG_COLOR.rgb;
	}

	gl_FragColor.rgb = diffuse.rgb;
	gl_FragColor.a = 1.0;
}
