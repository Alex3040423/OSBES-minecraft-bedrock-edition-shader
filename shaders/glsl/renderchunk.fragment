// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif //BYPASS_PIXEL_SHADER
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif	//BYPASS_PIXEL_SHADER
#endif //VERSION

varying vec4 color;//TODO what is this color??
vec4 normalColor;// fake normal vector will be stored here or may be later will be passed from vertex shader
varying vec4 position;// get pixel position in world space (used for calculate fake normals)
varying highp vec3 relativePosition;//calculates from vec4 position
#ifdef FOG
	varying vec4 fogColor;
#endif //FOG

#include "uniformShaderConstants.h"
#include "util.h"
#include "uniformPerFrameConstants.h"
LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

varying highp float ownFogAlpha;

void main()
{
#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else 


//texture_0 - diffuse texture (grass, stone, sand, wood etc.)
#if USE_TEXEL_AA
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0);
#else
	vec4 diffuse = texture2D(TEXTURE_0, uv0);
#endif //USE_TEXEL_AA


//what is this? can anyone explane?
#ifdef SEASONS_FAR
	diffuse.a = 1.0;
#endif //SEASONS_FAR


#if USE_ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD 0.05
	#else
	#define ALPHA_THRESHOLD 0.5
	#endif //APLPHA_TO_COVERAGE
	if(diffuse.a < ALPHA_THRESHOLD)
		discard;
#endif //USE_ALPHA_TEST
	
vec4 inColor = color;

#if defined(BLEND)
	diffuse.a *= inColor.a;
#endif //BLEND

#if !defined(ALWAYS_LIT)

	//diffuse.rgb *= inColor.rgb;
	//diffuse.a = inColor.a;

	//TODO try to calculate not doublesided normals
	//TODO or try to get normals from vertex shader (currently it is not available or just returns messy stuff) 
	normalColor = vec4(1.0 - ceil(fract(position.xyz)), 1.0);//calculate fake normals
	//after previos calculation normalColor for plants and water is black
	if(length(normalColor.rgb) < 1.0){
		normalColor.rgb = vec3(0.0,1.0,0.0);//make them green like they are locking on top
	}


	
	vec4 skyLightColor = vec4(0.5,0.75,1.0,0.0);//todo connect with time attribute
	vec3 skyLightDirection  = vec3(0.0,1.0,0.0);//todo connect with time attribute
	float skyLightWrapping = 4.0;//make sky lighting from sides too
	//TODO try to use normal maps 
	float dotAngle = max((dot(skyLightDirection, normalColor.rgb) + skyLightWrapping)/(1.0 + skyLightWrapping),0.0);
	vec4 skyLightPerPixel = skyLightColor * dotAngle;
	skyLightPerPixel.a = 1.0;



	vec3 sunLightDirection = vec3(0.5,0.4,0.1);//todo connect with time attribute
	vec3 sunLightColor = vec3(1.0, 0.9, 0.8);//todo connect with time attribute
	float sunDotAngle = max(dot(sunLightDirection, normalColor.rgb), 0.0);//todo use normalmaps to represent surface details
	vec4 sunLightPerPixel = vec4(sunLightColor * sunDotAngle, 0.0);


	vec4 pointLights = pow(texture2D(TEXTURE_1, vec2(uv1.x, 0.0)), vec4(4.0,4.0,4.0,4.0));

	vec4 ambientOclusion = texture2D(TEXTURE_1, vec2(0.0, uv1.y));

	vec4 fakeShadow = clamp(pow(ambientOclusion * 1.025, vec4(500.0, 500.0, 500.0, 500.0)),0.0,1.0); 


	//fake effect when light bounses from surface if hits it with very small angle
	float fresnelFactor = 5.0;
	highp vec3 V = normalize(relativePosition.xyz);
	vec3 N = normalize(normalColor.rgb);
	float fresnel = pow(1.0 - dot(N, V), fresnelFactor);

	if(fresnel > 1.0) {//because of our fake normals we should do this trick
		V = normalize(-relativePosition.xyz);//minus relative position
		N = normalize(normalColor.rgb);
		fresnel = pow(1.0 - dot(N, V), fresnelFactor);
	}


	//mix lighting
	vec4 resultLighting = ambientOclusion * 0.5 * skyLightPerPixel;
	vec4 perPixelFresnel = vec4(resultLighting.rgb * 2.0, fresnel);
	resultLighting += sunLightPerPixel * fakeShadow * 2.0;
	resultLighting += pointLights;
	diffuse.rgb *= resultLighting.rgb * 1.8;
	diffuse.rgb += perPixelFresnel.rgb * perPixelFresnel.a * 0.75;

#endif //ALWAYS_LIT



#ifndef SEASONS
	#if !USE_ALPHA_TEST && !defined(BLEND)
		diffuse.a = inColor.a;//with this parameter we can detirmane if it's water, or leaves or a ground
	#endif //USE_ALPHA_TEST
		//there we can get fake "ssao" (maybe)
		diffuse.rgb *= inColor.rgb;
#else
	//vec2 uv = inColor.xy;
	//diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	//diffuse.rgb *= inColor.aaa;
	//diffuse.a = 1.0;
#endif //SESONS;


	//TODO connect FOG_COLOR.rgb (available here 100%) and TIME attribute (hope is available) with ownFogColor value
	//to change its color depending on day/night cicle and weater
	vec3 ownFogColor = vec3(0.25,0.35,1.0);
	diffuse.rgb = mix(diffuse.rgb, ownFogColor, clamp(atan(ownFogAlpha / (RENDER_DISTANCE/2.0)),0.0,0.75));


	//TODO user actual position instead of relativePosition;
	vec4 milkyFogColor = vec4 (0.8, 0.9, 1.0, 0.0);
	float milkyFogHeightOffset = 4.0 ;
	float milkyFogHeightAtenuation = 16.0;
	milkyFogColor.a = (relativePosition.y + milkyFogHeightOffset) / milkyFogHeightAtenuation;
	milkyFogColor.a = pow(clamp(milkyFogColor.a, 0.0, 1.0), 1.5);
	milkyFogColor.a *= ownFogAlpha/ (RENDER_DISTANCE / 2.0);
	milkyFogColor.a = clamp(milkyFogColor.a, 0.0, 0.75);
	diffuse.rgb = mix(diffuse.rgb, milkyFogColor.rgb, milkyFogColor.a);
#ifdef FOG

	//fogColor.rgb = vec3(0.1,0.3,1.0);
	//fogColor.a -= relativePosityon.y;
	//diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, clamp(fogColor.a, 0.0, 1.0) );
#endif //FOG

	vec4 colorCorrectionContrast = vec4(1.5, 1.25, 1.0, 1.0);
	vec4 colorCorrectionTint = vec4(1.5,1.25,1.0,1.0);
	float colorCorrectionSaturation = 0.9;
	float grayScaleDiffuse = (diffuse.r + diffuse.g + diffuse.b)/3.0;
	diffuse = atan(pow(diffuse * colorCorrectionTint, colorCorrectionContrast));//avoid super bright areas (atan(x) can't be grater then 1.0)
	diffuse.rgb = mix(vec3(grayScaleDiffuse, grayScaleDiffuse, grayScaleDiffuse), diffuse.rgb, colorCorrectionSaturation);

	gl_FragColor = diffuse;	
#endif // BYPASS_PIXEL_SHADER
}
