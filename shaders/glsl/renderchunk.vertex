// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "vertexVersionCentroid.h"
#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		_centroid out vec2 uv0;
		_centroid out vec2 uv1;
	#endif	//BYPASS_PIXEL_SHADER
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif	//BYPASS_PIXEL_SHADER
#endif //VERSION

#ifndef BYPASS_PIXEL_SHADER
	varying vec4 color;
#endif //BYPAS_PIXEL_SHADER

#ifdef FOG
	varying vec4 fogColor;
#endif //FOG


#include "uniformWorldConstants.h"
#include "uniformPerFrameConstants.h"
#include "uniformShaderConstants.h"
#include "uniformRenderChunkConstants.h"

attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;
varying highp float ownFogAlpha;
varying vec4 position;
varying vec3 relativePosition;
const float rA = 1.0;
const float rB = 1.0;
const vec3 UNIT_Y = vec3(0,1,0);
const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange

void main()
{

    POS4 worldPos;
#ifdef AS_ENTITY_RENDERER
		POS4 pos = WORLDVIEWPROJ * POSITION;
		worldPos = pos;
#else
    worldPos.xyz = (POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
    worldPos.w = 1.0;

    // Transform to view space before projection instead of all at once to avoid floating point errors
    // Not required for entities because they are already offset by camera translation before rendering
    // World position here is calculated above and can get huge
    POS4 pos = WORLDVIEW * worldPos;
    pos = PROJ * pos;
#endif // AS_ENTITY_RENDERER
    gl_Position = pos;
	ownFogAlpha =  length(-worldPos.xyz);
	relativePosition = -worldPos.xyz; //used in fresnel calculation
#ifndef BYPASS_PIXEL_SHADER
    uv0 = TEXCOORD_0;
    uv1 = TEXCOORD_1;
	color = COLOR;
#endif //BYPASS_PIXEL_SHADER

///// find distance from the camera

#if defined(FOG) || defined(BLEND)
//#if defined(BLEND)
	#ifdef FANCY
		vec3 relPos = -worldPos.xyz;
		float cameraDepth = length(relPos);
	#else
		float cameraDepth = pos.z;
	#endif
#endif //// FOG or BLEND

#if defined ALPHA_TEST
//wind waves
vec3 localPosition = POSITION.xyz;
float t = TIME;
vec2 wavesScale = vec2(0.02, 0.04);
float wavesSpeed = 16.0;
float wavesFreq  = 4.0;

//wind impulses
float varyingSpeed = 2.0;
float varyingScale = 0.125;
float f = sin(localPosition.x * varyingScale + varyingSpeed * t) * 0.5 + 0.5;
f = clamp(pow(f, 3.0), 0.2, 1.0);
wavesScale *= f;

gl_Position.xy += sin(t * wavesSpeed + gl_Position.x * wavesFreq) * wavesScale;  
#endif

///// apply fog

#ifdef FOG
	float len = cameraDepth / RENDER_DISTANCE;
	//float len = atan(cameraDepth/(RENDER_DISTANCE/2.0));
	#ifdef ALLOW_FADE
		len += RENDER_CHUNK_FOG_ALPHA;
	#endif //ALLOW_FADE

    fogColor.rgb = FOG_COLOR.rgb;
	fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
	//fogColor.a  = clamp(len, 0.0, 1.0);
#endif //FOG

	position = POSITION;

///// blended layer (mostly water) magic
#ifdef BLEND
	//Mega hack: only things that become opaque are allowed to have vertex-driven transparency in the Blended layer...
	//to fix this we'd need to find more space for a flag in the vertex format. color.a is the only unused part
	bool shouldBecomeOpaqueInTheDistance = color.a < 0.95;
	//bool shouldBecomeOpaqueInTheDistance = false;
	if(shouldBecomeOpaqueInTheDistance) {
		#ifdef FANCY  /////enhance water
			float cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
			color = COLOR;
		#else
			//Completely insane, but if I don't have these two lines in here, the water doesn't render on a Nexus 6
			vec4 surfColor = vec4(color.rgb, 1.0);
			color = surfColor;
				
			vec3 relPos = -worldPos.xyz;
			float camDist = length(relPos);
			float cameraDist = camDist / FAR_CHUNKS_DISTANCE;
		#endif //FANCY
		
		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		color.a = mix(color.a, 1.0, alphaFadeOut);
		
	}
#endif //BLEND

#ifndef BYPASS_PIXEL_SHADER
	#ifndef FOG
		//If the FOG_COLOR isn't used, the reflection on NVN fails to compute the correct size of the constant buffer as the uniform will also be gone from the reflection data
		color.rgb += FOG_COLOR.rgb * 0.00001;
	#endif //FOG
#endif //BYPASS_PIXEL_SHADER
}

